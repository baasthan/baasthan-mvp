generator client {
  provider = "prisma-client-js"
  output   = "generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  accounts      Account[]
  sessions      Session[]

  members     Member[]
  invitations Invitation[]

  role            String?
  banned          Boolean?
  banReason       String?
  banExpires      DateTime?
  blog            blog[]
  payingGuestInfo PayingGuestInfo[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  activeOrganizationId String?

  impersonatedBy String?

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Jwks {
  id         String   @id
  publicKey  String
  privateKey String
  createdAt  DateTime

  @@map("jwks")
}

model Organization {
  id          String       @id
  name        String
  slug        String?
  logo        String?
  createdAt   DateTime
  metadata    String?
  members     Member[]
  invitations Invitation[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime

  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model blog {
  id        BigInt   @id @default(autoincrement())
  title     String   @unique
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isLive    Boolean  @default(false)
  authorId  String?
  user      User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)
}

// NEW PROPERTIES DB 

enum PGOccupancyTypeEnum {
  singleSharing @map("Single Sharing")
  doubleSharing @map("Double Sharing")
  tripleSharing @map("Triple Sharing")
}

enum PGGenderPolicyEnum {
  male   @map("Male")
  female @map("Female")
  coEd   @map("Co-Ed")
}

enum PGPreferedTenantsEnum {
  students             @map("Students")
  workingProfessionals @map("Working Professionals")
}

enum PGFoodTypeEnum {
  veg       @map("Veg")
  nonVeg    @map("Non-Veg")
  vegNonVeg @map("Veg/Non Veg")
}

enum PGAmenitiesEnum {
  wifi        @map("High Speed Wifi")
  ac          @map("Air Conditioning")
  bikeParking @map("Bike Parking")
  carParking  @map("Car Parking")
  laundary    @map("Laundary")
  security    @map("24x7 Security")
  gym         @map("In-House Gym")
  food        @map("Food Available")
  powerBackup @map("Power Backup")
}

enum PGWashroomEnum {
  common   @map("Common")
  attached @map("Attached")
}

enum PGMealsEnum {
  onlyDinner @map("Only Dinner")
  twoMeals   @map("Two Meals (Lunch & Dinner)")
  threeMeals @map("Three Meals (Lunch, Dinner and Breakfast)")
}

model PayingGuestInfo {
  id           String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  propertyName String
  hostId       String
  user         User   @relation(fields: [hostId], references: [id], onDelete: NoAction)

  availableOccupancyType PGOccupancyTypeEnum[]
  genderPolicy           PGGenderPolicyEnum      @default(coEd)
  startingPrice          Decimal                 @db.Decimal(10, 2)
  baasthanVerified       Boolean                 @default(false)
  reraRegistered         Boolean                 @default(false)
  reraRegistrationNumber String?
  amenities              PGAmenitiesEnum[]
  preferedTenants        PGPreferedTenantsEnum[] @default([students])
  washroomType           PGWashroomEnum
  floors                 Int
  operatingSince         Int                     @db.SmallInt
  meals                  PGMealsEnum
  noticePeriodInDays     Int                     @db.SmallInt

  addressLine1      String
  addressLine2      String?
  locality          String
  city              String
  district          String
  state             String
  country           String
  pincode           String
  PayingGuestImages PayingGuestImages[]
}

model PayingGuestImages {
  id            BigInt          @id @default(autoincrement())
  url           String
  payingGuestId String          @db.Uuid
  payingGuest   PayingGuestInfo @relation(fields: [payingGuestId], references: [id], onDelete: Cascade)
}

model Location {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  locality        String
  relatedLocality String[]
  pincode         String
}
