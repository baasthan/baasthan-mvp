generator client {
  provider = "prisma-client-js"
  output   = "generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  accounts      Account[]
  sessions      Session[]

  members     Member[]
  invitations Invitation[]

  role         String?
  banned       Boolean?
  banReason    String?
  banExpires   DateTime?
  blog         blog[]
  PropertyInfo PropertyInfo[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  activeOrganizationId String?

  impersonatedBy String?

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Jwks {
  id         String   @id
  publicKey  String
  privateKey String
  createdAt  DateTime

  @@map("jwks")
}

model Organization {
  id           String         @id
  name         String
  slug         String?
  logo         String?
  createdAt    DateTime
  metadata     String?
  members      Member[]
  invitations  Invitation[]
  PropertyInfo PropertyInfo[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime

  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model blog {
  id        BigInt   @id @default(autoincrement())
  title     String   @unique
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isLive    Boolean  @default(false)
  authorId  String?
  user      User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)
}

model Location {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  propertyId    String       @unique @db.Uuid
  city          String
  state         String
  pincode       String
  landmark      String?
  googleMapLink String?
  PropertyInfo  PropertyInfo @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}


enum GenderPreferedEnum {
  Male
  Female
  CoEd   @map("Co-Ed")
}

model PropertyInfo {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  hostId            String
  title             String
  startingPrice     BigInt
  rera_registered   String?
  year_built        Int?
  status            String?
  floor             Int?
  address           String?
  rating            Int?
  rating_count      Int?
  created_at        DateTime            @default(now())
  PropertyAmenities PropertyAmenities[]
  PropertyImages    PropertyImages[]
  Reviews           Reviews[]
  Unit              Unit[]
  host              User                @relation(fields: [hostId], references: [id])
  Location          Location?
  Organization      Organization?       @relation(fields: [organizationId], references: [id])
  organizationId    String?
  commercialInfos   commercial_info[]
  residentialInfos  residential_info[]
  pgInfos           pgInfo[]
  propertySearchResult propertySearchResults?
}

enum UnitTypeEnum {
  Bhk_1 @map("1BHK")
  Bhk_2 @map("2BHK")
  Bhk_3 @map("3BHK")
}

model Unit {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  propertyId    String       @db.Uuid
  type          UnitTypeEnum
  PropertyInfo  PropertyInfo @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  bedrooms      Int?
  bathrooms     Int?
  covered_area  Float?
  carpet_area   Float?
  configuration String?
  facing        String?
  furnishing    String?
}

model PropertyAmenities {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  propertyId   String        @db.Uuid
  amenityName  String[]
  PropertyInfo PropertyInfo? @relation(fields: [propertyId], references: [id])
}

model PropertyImages {
  id           Int           @id @default(autoincrement())
  propertyId   String        @db.Uuid
  url          String
  isMain       Boolean       @default(false)
  PropertyInfo PropertyInfo? @relation(fields: [propertyId], references: [id])
}

model Reviews {
  id           Int           @id @default(autoincrement())
  propertyId   String        @db.Uuid
  userId       String
  location     String
  verified     Boolean
  rating       Int
  comment      String
  helpful_yes  Boolean       @default(false)
  helpful_no   Boolean       @default(false)
  review_date  DateTime      @default(now())
  PropertyInfo PropertyInfo? @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}


 
// new
 
enum PropertyType {
  Bhk1 @map("1 Bhk")
  Bhk2 @map("2 Bhk")
  Bhk3 @map("3 Bhk")
}
 
model commercial_info {
  id             Int   @id
  propertyId     String @db.Uuid
  locality       String
  property       PropertyType
  budget         Int
  configuration  Int
  area           Int
  furnishing     String
  postedBy       String
  availableFrom  String
  reraRegistered Boolean
  registered     Boolean
  propertyInfo   PropertyInfo @relation(fields: [propertyId], references: [id], map: "commercial_info_propertyId_to_propertyinfo_fkey")
  propertySearchResult propertySearchResults @relation(fields: [propertyId], references: [propertyId], map: "commercial_info_propertyId_to_searchresults_fkey")
}
 
model residential_info {
  id             Int   @id
  propertyId     String @db.Uuid
  locality         String
  property_type    String
  budget           Int
  configuration    Int
  bathroom         Int
  area             Int
  furnishing       String
  postedBy         String
  available_from   String
  tenantsPreferred String
  rera_registered  Boolean
  propertyInfo     PropertyInfo @relation(fields: [propertyId], references: [id], map: "residential_info_propertyId_to_propertyinfo_fkey")
  propertySearchResult propertySearchResults @relation(fields: [propertyId], references: [propertyId], map: "residential_info_propertyId_to_searchresults_fkey")
}
 
enum OccupancyTypeEnum {
  singleSharing @map("Single Sharing")
  doubleSharing @map("Double Sharing")
  TripleSharing @map("Triple Sharing")
  QuadSharing   @map("Quadra Sharing")
}
 
model pgInfo {
  id                 Int   @id
  propertyId         String @db.Uuid
  locality           String
  budget             Int
  occupancyType      OccupancyTypeEnum[]
  tenantsPreferred   String
  genderPrefered     GenderPreferedEnum
  food_provided      Boolean
  amenities          String
  postedBy           String
  propertyType       String
  floor              Int
  reraRegistered     Boolean
  reraRegistrationId String?
  propertyInfo       PropertyInfo @relation(fields: [propertyId], references: [id], map: "pginfo_propertyId_to_propertyinfo_fkey")
  propertySearchResult propertySearchResults @relation(fields: [propertyId], references: [propertyId], map: "pginfo_propertyId_to_searchresults_fkey")
}

model propertySearchResults {
  propertyId   String   @id @unique @map("property_id") @db.Uuid
  propertyTitle String
  locality      String
  montlyRent    Int
  bed           Int
  bath          Int
  balcony       Int
  property      PropertyInfo @relation(fields: [propertyId], references: [id])
  pgInfos           pgInfo[]
  commercialInfos   commercial_info[]
  residentialInfos  residential_info[]
}
